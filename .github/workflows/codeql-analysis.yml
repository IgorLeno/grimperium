name: üîí Security Analysis

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    - cron: '0 6 * * 1'  # Weekly on Mondays

concurrency:
  group: security-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Multi-tool security analysis
  security-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
    strategy:
      fail-fast: false
      matrix:
        tool: [codeql, dependencies, secrets, licenses]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Python
        if: matrix.tool != 'codeql'
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          cache: 'pip'
          
      - name: CodeQL Analysis
        if: matrix.tool == 'codeql'
        uses: github/codeql-action/init@v3
        with:
          languages: python
          config-file: ./.github/codeql/codeql-config.yml
          
      - name: Autobuild
        if: matrix.tool == 'codeql'
        uses: github/codeql-action/autobuild@v3
        
      - name: Perform CodeQL Analysis
        if: matrix.tool == 'codeql'
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:python"
          
      - name: Dependency Security Scan
        if: matrix.tool == 'dependencies'
        run: |
          echo "üîç Scanning dependencies for vulnerabilities..."
          
          # Install security tools
          pip install safety pip-audit
          
          if [ -f requirements.txt ]; then
            # Safety check
            safety check --json --output safety-report.json || {
              echo "‚ö†Ô∏è Vulnerabilities found in dependencies"
              cat safety-report.json
            }
            
            # pip-audit check
            pip-audit --format=json --output=audit-report.json || {
              echo "‚ö†Ô∏è Audit issues found"
              cat audit-report.json
            }
          fi
          
      - name: Secret Detection
        if: matrix.tool == 'secrets'
        run: |
          echo "üîç Scanning for exposed secrets..."
          
          # Basic secret patterns
          patterns=(
            "password\s*=\s*['\"][^'\"]+['\"]"
            "api_key\s*=\s*['\"][^'\"]+['\"]"
            "secret\s*=\s*['\"][^'\"]+['\"]"
            "token\s*=\s*['\"][^'\"]+['\"]"
            "-----BEGIN.*PRIVATE KEY-----"
          )
          
          for pattern in "${patterns[@]}"; do
            if grep -r -i -E "$pattern" . --include="*.py" --include="*.yml" --include="*.yaml" --exclude-dir=".git"; then
              echo "‚ö†Ô∏è Potential secret found with pattern: $pattern"
            fi
          done
          
      - name: License Compliance
        if: matrix.tool == 'licenses'
        run: |
          echo "üìã Checking license compliance..."
          
          if [ -f requirements.txt ]; then
            pip install pip-licenses
            pip install -r requirements.txt
            
            # Generate license report
            pip-licenses --format=json --output-file=licenses.json
            
            # Check for problematic licenses
            problematic_licenses=("GPL" "AGPL" "LGPL")
            for license in "${problematic_licenses[@]}"; do
              if grep -i "$license" licenses.json; then
                echo "‚ö†Ô∏è Potentially problematic license found: $license"
                echo "Review licenses.json for details"
              fi
            done
          fi

  # Computational chemistry specific security
  chemistry-security:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          
      - name: Chemistry-specific security checks
        run: |
          echo "üß™ Performing computational chemistry security analysis..."
          
          # Check for dangerous file operations
          echo "Checking for potentially dangerous file operations..."
          if grep -r "subprocess\|os\.system\|eval\|exec" grimperium/ --include="*.py"; then
            echo "‚ö†Ô∏è Found potentially dangerous operations - manual review required"
          fi
          
          # Check external program calls
          echo "Analyzing external program invocations..."
          if grep -r "CREST\|MOPAC\|OpenBabel" grimperium/ --include="*.py"; then
            echo "‚úÖ External chemistry programs detected - validating secure usage"
            
            # Ensure external programs are properly configured
            risky_patterns=(
              "shell=True"
              "os\.system"
              "subprocess\.call.*shell=True"
            )
            
            for pattern in "${risky_patterns[@]}"; do
              if grep -r -E "$pattern" grimperium/ --include="*.py"; then
                echo "‚ö†Ô∏è Potentially risky shell execution pattern: $pattern"
              fi
            done
          fi
          
          # Check data handling security
          echo "Validating secure data handling..."
          if grep -r "pickle\|eval\|exec" grimperium/ --include="*.py"; then
            echo "‚ö†Ô∏è Found potentially unsafe serialization/execution patterns"
          fi
          
          # Validate configuration security
          if [ -f config.yaml ]; then
            echo "‚úÖ Checking configuration security..."
            if grep -i "password\|secret\|key" config.yaml; then
              echo "‚ö†Ô∏è Potential credentials in configuration file"
            fi
          fi

  # Aggregate security results
  security-report:
    runs-on: ubuntu-latest
    needs: [security-scan, chemistry-security]
    if: always()
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Security Summary
        run: |
          echo "üîí Security Analysis Summary"
          echo "============================"
          
          scan_status="${{ needs.security-scan.result }}"
          chemistry_status="${{ needs.chemistry-security.result }}"
          
          echo "Multi-tool Security Scan: $scan_status"
          echo "Chemistry-specific Security: $chemistry_status"
          
          if [[ "$scan_status" == "failure" || "$chemistry_status" == "failure" ]]; then
            echo ""
            echo "‚ùå Security issues detected - review job outputs"
            echo "üìã Action items:"
            echo "1. Review security scan results above"
            echo "2. Address any identified vulnerabilities"
            echo "3. Update dependencies if needed"
            echo "4. Review external program integrations"
            exit 1
          else
            echo ""
            echo "‚úÖ No critical security issues detected"
            echo "üîç Regular security monitoring active"
          fi
