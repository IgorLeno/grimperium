name: Security Analysis

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - codeql-only
          - dependencies-only

# Prevent concurrent security scans
concurrency:
  group: security-${{ github.ref }}
  cancel-in-progress: false  # Don't cancel security scans

env:
  PYTHON_VERSION: '3.9'

jobs:
  # CodeQL security analysis
  codeql:
    runs-on: ubuntu-latest
    if: |
      github.event_name != 'workflow_dispatch' || 
      inputs.scan_type == 'full' || 
      inputs.scan_type == 'codeql-only'
    
    # Minimal permissions for security scanning
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'python' ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          config-file: ./.github/codeql/codeql-config.yml
          # Custom queries for Python security
          queries: |
            security-extended
            security-and-quality

      - name: Setup Python for dependencies
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip

      - name: Install dependencies for analysis
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"
          upload: true

  # Dependency vulnerability scanning
  dependency-scan:
    runs-on: ubuntu-latest
    if: |
      github.event_name != 'workflow_dispatch' || 
      inputs.scan_type == 'full' || 
      inputs.scan_type == 'dependencies-only'
    
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install safety pip-audit bandit[toml]

      - name: Run Safety check
        continue-on-error: true
        run: |
          echo "::group::Safety - Known Security Vulnerabilities"
          safety check \
            --json \
            --output safety-report.json \
            --continue-on-error || true
          
          # Display human-readable report
          safety check --short-report || true
          echo "::endgroup::"

      - name: Run pip-audit
        continue-on-error: true
        run: |
          echo "::group::pip-audit - Package Vulnerabilities"
          pip-audit \
            --format=json \
            --output=pip-audit-report.json \
            --require requirements.txt || true
          
          # Display summary
          pip-audit --require requirements.txt || true
          echo "::endgroup::"

      - name: Run Bandit security linter
        continue-on-error: true
        run: |
          echo "::group::Bandit - Code Security Issues"
          bandit \
            -r grimperium/ \
            -f json \
            -o bandit-report.json \
            --confidence-level medium \
            --severity-level medium || true
          
          # Display summary
          bandit -r grimperium/ -ll || true
          echo "::endgroup::"

      - name: Upload vulnerability reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-reports-${{ github.run_number }}
          path: |
            safety-report.json
            pip-audit-report.json
            bandit-report.json
          retention-days: 90

      - name: Create security summary
        if: always()
        run: |
          echo "## üîí Security Scan Summary" > security-summary.md
          echo "" >> security-summary.md
          
          # Process Safety report
          if [ -f safety-report.json ]; then
            vuln_count=$(jq '[.vulnerabilities[]] | length' safety-report.json 2>/dev/null || echo "0")
            echo "### üì¶ Dependency Vulnerabilities (Safety)" >> security-summary.md
            if [ "$vuln_count" -gt 0 ]; then
              echo "‚ö†Ô∏è **$vuln_count vulnerabilities found**" >> security-summary.md
            else
              echo "‚úÖ No known vulnerabilities in dependencies" >> security-summary.md
            fi
            echo "" >> security-summary.md
          fi
          
          # Process pip-audit report
          if [ -f pip-audit-report.json ]; then
            audit_count=$(jq '[.vulnerabilities[]] | length' pip-audit-report.json 2>/dev/null || echo "0")
            echo "### üîç Package Audit (pip-audit)" >> security-summary.md
            if [ "$audit_count" -gt 0 ]; then
              echo "‚ö†Ô∏è **$audit_count issues found**" >> security-summary.md
            else
              echo "‚úÖ No audit issues found" >> security-summary.md
            fi
            echo "" >> security-summary.md
          fi
          
          # Process Bandit report
          if [ -f bandit-report.json ]; then
            bandit_count=$(jq '[.results[]] | length' bandit-report.json 2>/dev/null || echo "0")
            echo "### üõ°Ô∏è Code Security (Bandit)" >> security-summary.md
            if [ "$bandit_count" -gt 0 ]; then
              echo "‚ö†Ô∏è **$bandit_count potential security issues**" >> security-summary.md
            else
              echo "‚úÖ No security issues detected in code" >> security-summary.md
            fi
            echo "" >> security-summary.md
          fi
          
          # Add recommendations
          echo "### üîß Recommendations" >> security-summary.md
          echo "" >> security-summary.md
          echo "1. **Review Reports**: Check uploaded artifacts for detailed findings" >> security-summary.md
          echo "2. **Update Dependencies**: Run \`pip install --upgrade -r requirements.txt\`" >> security-summary.md
          echo "3. **Fix Issues**: Address high-severity findings first" >> security-summary.md
          echo "4. **Monitor**: Set up dependency update automation" >> security-summary.md
          
          cat security-summary.md

      - name: Upload security summary
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-summary-${{ github.run_number }}
          path: security-summary.md
          retention-days: 30

  # License compliance check
  license-check:
    runs-on: ubuntu-latest
    if: github.event_name != 'workflow_dispatch' || inputs.scan_type == 'full'
    
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install license checker
        run: |
          pip install pip-licenses

      - name: Check licenses
        run: |
          echo "::group::License Compliance Check"
          
          # Generate license report
          pip install -r requirements.txt
          pip-licenses \
            --format=json \
            --output-file=licenses-report.json \
            --ignore-packages pip setuptools wheel
          
          # Display human-readable format
          pip-licenses --format=table --ignore-packages pip setuptools wheel
          
          echo "::endgroup::"

      - name: Validate license compatibility
        run: |
          echo "::group::License Validation"
          
          # Define allowed licenses (academic/research project)
          allowed_licenses=(
            "MIT"
            "Apache Software License"
            "Apache 2.0"
            "BSD License"
            "BSD"
            "3-Clause BSD"
            "2-Clause BSD"
            "ISC License"
            "Python Software Foundation License"
            "Mozilla Public License 2.0"
          )
          
          # Check for problematic licenses
          problematic_found=false
          
          # Read licenses and check compatibility
          pip-licenses --format=plain --ignore-packages pip setuptools wheel | while read line; do
            if [[ "$line" =~ ^[[:space:]]*([^[:space:]]+)[[:space:]]+([^[:space:]]+)[[:space:]]+(.+)$ ]]; then
              package="${BASH_REMATCH[1]}"
              version="${BASH_REMATCH[2]}"
              license="${BASH_REMATCH[3]}"
              
              # Check if license is in allowed list
              license_ok=false
              for allowed in "${allowed_licenses[@]}"; do
                if [[ "$license" == *"$allowed"* ]]; then
                  license_ok=true
                  break
                fi
              done
              
              if [[ "$license_ok" == false ]] && [[ "$license" != "UNKNOWN" ]]; then
                echo "‚ö†Ô∏è Potentially problematic license: $package ($version) - $license"
                problematic_found=true
              fi
            fi
          done
          
          if [[ "$problematic_found" == false ]]; then
            echo "‚úÖ All licenses are compatible with academic/research use"
          fi
          
          echo "::endgroup::"

      - name: Upload license report
        uses: actions/upload-artifact@v4
        with:
          name: license-report-${{ github.run_number }}
          path: licenses-report.json
          retention-days: 30

  # Security status aggregation
  security-status:
    if: always()
    needs: [codeql, dependency-scan, license-check]
    runs-on: ubuntu-latest
    permissions:
      contents: read
    
    steps:
      - name: Security analysis summary
        run: |
          echo "## üîí Security Analysis Results"
          echo ""
          
          # Check each security job status
          codeql_status="${{ needs.codeql.result }}"
          deps_status="${{ needs.dependency-scan.result }}"
          license_status="${{ needs.license-check.result }}"
          
          # CodeQL status
          case "$codeql_status" in
            "success")
              echo "‚úÖ **CodeQL Analysis**: No security vulnerabilities detected"
              ;;
            "failure")
              echo "‚ùå **CodeQL Analysis**: Security issues found - review alerts"
              ;;
            "skipped")
              echo "‚è≠Ô∏è **CodeQL Analysis**: Skipped"
              ;;
            *)
              echo "‚ùì **CodeQL Analysis**: $codeql_status"
              ;;
          esac
          
          # Dependency scan status
          case "$deps_status" in
            "success")
              echo "‚úÖ **Dependency Scan**: No critical vulnerabilities"
              ;;
            "failure")
              echo "‚ö†Ô∏è **Dependency Scan**: Issues found - review artifacts"
              ;;
            "skipped")
              echo "‚è≠Ô∏è **Dependency Scan**: Skipped"
              ;;
            *)
              echo "‚ùì **Dependency Scan**: $deps_status"
              ;;
          esac
          
          # License check status
          case "$license_status" in
            "success")
              echo "‚úÖ **License Check**: All licenses compatible"
              ;;
            "failure")
              echo "‚ö†Ô∏è **License Check**: Potential license issues"
              ;;
            "skipped")
              echo "‚è≠Ô∏è **License Check**: Skipped"
              ;;
            *)
              echo "‚ùì **License Check**: $license_status"
              ;;
          esac
          
          echo ""
          echo "**Next Steps:**"
          echo "1. Review uploaded security reports in workflow artifacts"
          echo "2. Address any high-severity findings immediately"
          echo "3. Update dependencies regularly"
          echo "4. Monitor security advisories for used packages"
          
          # Set overall security status
          if [[ "$codeql_status" == "failure" ]]; then
            echo ""
            echo "üö® **ACTION REQUIRED**: CodeQL found security vulnerabilities"
            exit 1
          fi