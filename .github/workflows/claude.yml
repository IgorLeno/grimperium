# .github/workflows/claude.yml (melhorado)
name: Claude Code

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned, labeled]
  pull_request:
    types: [opened, synchronize]

jobs:
  claude:
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'issues' && contains(github.event.issue.labels.*.name, 'claude-code')) ||
      (github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'claude-review'))
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
      id-token: write
      actions: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Configure Git
        run: |
          git config --global user.name "Claude Code Bot"
          git config --global user.email "claude-code@anthropic.com"
      
      - name: Run Claude Code
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          allowed_tools: "Bash(git add *),Bash(git commit *),Bash(git push *),Bash(git status),Bash(git diff)"
          custom_instructions: |
            Você é o agente principal de codificação. Foque em:
            - Implementar código Python seguindo PEP 8
            - Usar Pydantic para validação de dados
            - Implementar testes com pytest
            - Documentar com docstrings
            - Seguir a arquitetura service-oriented do projeto
            - Fazer commits automáticos quando necessário
